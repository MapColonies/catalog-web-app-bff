import { AxiosRequestConfig } from 'axios';
import { v4 as uuid } from 'uuid';
import { Logger } from '@map-colonies/js-logger';
import { Layer3DRecordInput } from '../../AUTOGENERATED/GraphQLClass';
import { IngestionData } from '../../graphql/inputTypes';
import { requestHandler } from '../../utils';
import { IConfig } from '../interfaces';
import { IIngestionManagerService } from './ingestion-manager.interface';

export class IngestionManager3D implements IIngestionManagerService {
  private readonly serviceURL: string = '';

  public constructor(private readonly config: IConfig, private readonly logger: Logger) {
    this.serviceURL = this.config.get('ingestionServices.3d.url');
  }

  public async ingest(data: IngestionData): Promise<IngestionData> {
    const res = await requestHandler(`${this.serviceURL}/models`, 'POST', this.buildPayload(data));
    return data;
  }

  private buildPayload(data: IngestionData): AxiosRequestConfig {
    const payloadData = {
      modelPath: data.directory,
      tilesetFilename: data.fileNames[0],
      metadata: {
        ...data.metadata,
        identifier: uuid(),
        title: data.metadata.productName,
        producerName: 'IDFMU',
        typename: '3D',
        schema: '3d_schema',
        mdSource: '3d_mdSource',
        xml: '3d_xml',
        insertDate: new Date().toISOString(),
        anytext: `${data.metadata.productName} ${data.metadata.description ?? ''} ${
          data.metadata.sensorType ? data.metadata.sensorType.join(',') : ''
        } ${(data.metadata as Layer3DRecordInput).version ?? ''}`,
        sensorType: data.metadata.sensorType ? data.metadata.sensorType.join(',') : '',
        accuracyLE90: String((data.metadata as Layer3DRecordInput).accuracyLE90),
        nominalResolution:
          (data.metadata as Layer3DRecordInput).nominalResolution !== undefined
            ? String((data.metadata as Layer3DRecordInput).nominalResolution)
            : undefined,
        estimatedPrecision:
          (data.metadata as Layer3DRecordInput).estimatedPrecision !== undefined
            ? String((data.metadata as Layer3DRecordInput).estimatedPrecision)
            : undefined,
        measuredPrecision:
          (data.metadata as Layer3DRecordInput).measuredPrecision !== undefined
            ? String((data.metadata as Layer3DRecordInput).measuredPrecision)
            : undefined,
        horizontalAccuracyCE90: data.metadata.accuracyCE90 !== undefined ? String(data.metadata.accuracyCE90) : undefined,
        timeBegin: data.metadata.sourceDateStart,
        timeEnd: data.metadata.sourceDateEnd,
        srs: data.metadata.srsId,
        footprint: (data.metadata as Layer3DRecordInput).wktGeometry,
      },
    };
    return {
      data: {
        ...payloadData,
      },
    };
  }
}
