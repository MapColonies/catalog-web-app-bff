import { Readable } from 'stream';
import { Logger } from '@map-colonies/js-logger';
import { Request } from 'express';
import { AxiosResponse } from 'axios';
import { File } from '../../graphql/storage-explorer';
import { ExplorerGetByPath, ExplorerGetById, ExplorerResolveMetadataAsModel } from '../../graphql/inputTypes';
import { requestExecutor } from '../../utils';
import { IConfig, IContext, IService } from '../interfaces';
import { Layer3DRecord } from '../../AUTOGENERATED/GraphQLClass';
import { IStorageExplorerManagerService } from './storage-explorer.interface';
// import searchMockData from '../../graphql/MOCKS/storage-explorer/mock_utils';
// import MOCK_3D_DATA, { MOCK_FILE } from '../../graphql/MOCKS/storage-explorer/3D/MOCK_DATA';

export class StorageExplorerManager3D implements IStorageExplorerManagerService {
  private readonly service: IService;
  private readonly bufferSize: number | undefined;

  public constructor(private readonly config: IConfig, private readonly logger: Logger) {
    this.service = this.config.get('storageExplorerServices.3d');
    this.bufferSize = this.config.get('storageExplorerServices.raster.bufferSize');
  }

  public async getDirectory(data: ExplorerGetByPath, ctx: IContext): Promise<File[]> {
    this.logger.info(`[StorageExplorerManager3D][getDirectory] fetching directory with data: ${JSON.stringify(data)}.`);

    // REAL LOGIC
    const res = await requestExecutor(
      {
        url: `${this.service.url}/explorer/directory?path=${data.path}`,
        exposureType: this.service.exposureType,
      },
      'GET',
      {},
      ctx
    )
      .then((res) => res.data as File[])
      .then((files) => {
        return Object.values(files.map((file) => ({ ...file, selectable: !file.isDir && file.name !== 'metadata.json' })));
      });

    return res;

    // MOCK DATA
    // return Promise.resolve(searchMockData(data.path, MOCK_3D_DATA)).then((data) => {
    //   return data.map((file) => ({ ...file, selectable: !file.isDir && file.name !== 'metadata.json' }));
    // });
  }

  public async getDirectoryById(data: ExplorerGetById, ctx: IContext): Promise<File[]> {
    this.logger.info(`[StorageExplorerManager3D][getDirectoryById] fetching directory by id with data: ${JSON.stringify(data)}.`);

    const res = await requestExecutor(
      {
        url: `${this.service.url}/explorer/directorybyid?id=${data.id}`,
        exposureType: this.service.exposureType,
      },
      'GET',
      {},
      ctx
    )
      .then((res) => res.data as File[])
      .then((files) => {
        return Object.values(files);
      });

    return res;
  }

  public async getFile(data: ExplorerGetByPath, ctx: IContext): Promise<Layer3DRecord> {
    this.logger.info(`[StorageExplorerManager3D][getFile] fetching file with data: ${JSON.stringify(data)}.`);

    // REAL LOGIC
    const res = await requestExecutor(
      {
        url: `${this.service.url}/explorer/file?path=${data.path}`,
        exposureType: this.service.exposureType,
      },
      'GET',
      {},
      ctx
    ).then((res) => res.data as Layer3DRecord);

    return res;

    // MOCK DATA
    // return Promise.resolve(MOCK_FILE);
  }

  public async getStreamFile(data: ExplorerGetByPath, ctx: IContext): Promise<AxiosResponse<Readable>> {
    this.logger.info(`[StorageExplorerManagerRaster][getStreamFile] fetching file from path: ${data.path}.`);

    const bufferSizeQuery = this.bufferSize !== undefined ? `&buffersize=${this.bufferSize}` : '';

    const res = await requestExecutor(
      {
        url: `${this.service.url}/explorer/file?path=${data.path}${bufferSizeQuery}`,
        exposureType: this.service.exposureType,
      },
      'GET',
      {
        responseType: 'stream',
        headers: {
          'x-client-response-type': 'stream',
        },
      },
      ctx
    );

    return res;
  }

  public async writeStreamFile(data: ExplorerGetByPath, req: Request, ctx: IContext): Promise<AxiosResponse> {
    this.logger.info(`[StorageExplorerManagerRaster][writeStreamFile] writing file in path: ${data.path}.`);

    const res = await requestExecutor(
      {
        url: `${this.service.url}/explorer/uploadfile?path=${data.path}`,
        exposureType: this.service.exposureType,
      },
      'GET',
      {
        data: req,
      },
      ctx
    );

    return res.data as AxiosResponse;
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  public async resolveMetadataAsModel({ metadata }: ExplorerResolveMetadataAsModel, ctx: IContext): Promise<Layer3DRecord> {
    this.logger.info(`[StorageExplorerManager3D][resolveMetadataAsModel] resolve file metadata: ${JSON.stringify(metadata)}.`);

    const res = await Promise.resolve(JSON.parse(metadata) as Layer3DRecord);

    return res;
  }

  public async getFileById(data: ExplorerGetById, ctx: IContext): Promise<Layer3DRecord> {
    this.logger.info(`[StorageExplorerManager3D][getFileById] fetching file by id with data: ${JSON.stringify(data)}.`);

    const res = await requestExecutor(
      {
        url: `${this.service.url}/explorer/filebyid?id=${data.id}`,
        exposureType: this.service.exposureType,
      },
      'GET',
      {},
      ctx
    ).then((res) => res.data as Layer3DRecord);

    return res;
  }

  public async getDecryptedId(data: ExplorerGetById, ctx: IContext): Promise<{ data: string }> {
    this.logger.info(`[StorageExplorerManager3D][getDecryptedId] decrypting id with data: ${JSON.stringify(data)}.`);

    const res = await requestExecutor(
      {
        url: `${this.service.url}/explorer/decryptid?id=${data.id}`,
        exposureType: this.service.exposureType,
      },
      'GET',
      {},
      ctx
    ).then((res) => res.data as { data: string });

    return res;
  }
}
