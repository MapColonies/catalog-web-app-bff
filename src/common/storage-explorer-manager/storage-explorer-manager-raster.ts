import { Logger } from '@map-colonies/js-logger';
import { requestHandler } from '../../utils';
import { IConfig } from '../interfaces';
import { ExplorerGetById, ExplorerGetByPathSuffix } from '../../graphql/inputTypes';
import { File } from '../../graphql/storage-explorer';
import { LayerRasterRecord } from '../../AUTOGENERATED/GraphQLClass';
// import searchMockData from '../../graphql/MOCKS/storage-explorer/mock_utils';
// import RASTER_MOCK_DATA, { MOCK_FILE } from '../../graphql/MOCKS/storage-explorer/RASTER/MOCK_DATA';
import { IStorageExplorerManagerService } from './storage-explorer.interface';

export class StorageExplorerManagerRaster implements IStorageExplorerManagerService {
  private readonly serviceURL: string = '';

  public constructor(private readonly config: IConfig, private readonly logger: Logger) {
    this.serviceURL = this.config.get('storageExplorerServices.raster.url');
  }

  public async getDirectory(data: ExplorerGetByPathSuffix): Promise<File[]> {
    this.logger.info(`[StorageExplorerManagerRaster][getDirectory] fetching directory with data: ${JSON.stringify(data)}.`);

    // REAL LOGIC
    const res = await requestHandler(`${this.serviceURL}/directory?pathSuffix=${data.pathSuffix}`, 'GET', {})
      .then((res) => res.data as File[])
      .then((files) => {
        return Object.values(files.map((file) => ({ ...file, selectable: !file.isDir && file.name !== 'metadata.json' })));
      });

    return res;

    // MOCK DATA
    // return Promise.resolve(searchMockData(data.pathSuffix, RASTER_MOCK_DATA)).then((data) => {
    //   return data.map((file) => ({ ...file, selectable: !file.isDir && file.name !== 'metadata.json' }));
    // });
  }

  public async getDirectoryById(data: ExplorerGetById): Promise<File[]> {
    this.logger.info(`[StorageExplorerManagerRaster][getDirectoryById] fetching directory by id with data: ${JSON.stringify(data)}.`);

    const res = await requestHandler(`${this.serviceURL}/directorybyid?id=${data.id}`, 'GET', {})
      .then((res) => res.data as File[])
      .then((files) => {
        return Object.values(files);
      });

    return res;
  }

  public async getFile(data: ExplorerGetByPathSuffix): Promise<LayerRasterRecord> {
    this.logger.info(`[StorageExplorerManagerRaster][getFile] fetching file with data: ${JSON.stringify(data)}.`);

    // REAL LOGIC
    const res = await requestHandler(`${this.serviceURL}/file?pathSuffix=${data.pathSuffix}`, 'GET', {}).then((res) => res.data as LayerRasterRecord);

    return res;

    // MOCK DATA
    // return Promise.resolve(MOCK_FILE);
  }

  public async getFileById(data: ExplorerGetById): Promise<LayerRasterRecord> {
    this.logger.info(`[StorageExplorerManagerRaster][getFileById] fetching file by id with data: ${JSON.stringify(data)}.`);

    const res = await requestHandler(`${this.serviceURL}/filebyid?id=${data.id}`, 'GET', {}).then((res) => res.data as LayerRasterRecord);

    return res;
  }

  public async getDecryptedId(data: ExplorerGetById): Promise<{ data: string }> {
    this.logger.info(`[StorageExplorerManagerRaster][getDecryptedId] decrypting id with data: ${JSON.stringify(data)}.`);

    const res = await requestHandler(`${this.serviceURL}/decryptid?id=${data.id}`, 'GET', {}).then((res) => res.data as { data: string });

    return res;
  }
}
